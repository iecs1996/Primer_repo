CodeCommit versionamiento de código AWS

Clonar: copia exacta de una version en un server remoto a mi pc local.

Repositorio: carpeta que graba los cambios realizados.

Commit: punto de guardado que captura el estado actual del proyecto. al cual se puede regresar en algún punto necesario.

Rama: linea de trabajo independiente del principal. Que permite fusionar a la rama principal al ser requerido. 

Workspace: area de trabajo local.

Staging: Memoria RAM de la PC. Guarda modificaciones pero no de forma permanente.

Local Repository: Es afectado por el commit y graba los cambios en el repositorio de ROM.

Remote Repository: Es afectado por el git push y graba los cambios en el repositorio de la nube.

git commit -a: Es una combinación de git add y git commit, que sincroniza todo

git reset: quita los cambios del git add

git reset <commit>: reinicia desde un commit

git fetch: reinicia los cambios desde un commit del repositorio nube

git pull: sincroniza los cambios desde el repositorio remoto a un repositorio ya creado.
SIEMPRE QUE SE TRABAJE EN EQUIPO UN PROYECTO COLABORATIVO SE DEBE ARRANCAR CON UN GIT PULL PARA SINCRONIZAR DATOS.

crear rama:
git checkout -b <nombre de rama>

git branch: Muestra las ramas que existen y resalta la rama en la que se está trabajando.

git merge: fusiona los cambios de una rama a la rama principal
SOLO SE HACE DESDE EL MAIN


----------------BUENAS PRACTICAS DE HACER COMMITS------------------------------
1. Hacerlos frecuentes y documentados comprensiblemente para mantener un historial claro y comprensible de los cambios hechos.

2. Ordenar cada cambio con su commit para una correcta representación de los cambios.

3. Mensajes claros en cada commit

4. Aplicar una estructura en los commit, un titulo y una descripción

----------------------GIT IGNORE-----------------------------------------
Git ignore es un archivo que le indica a GIT que debe incluir o ignorar en su repositorio.
Porque usar Git Ignore
1. Mantener el repositorio limpio: no subir archivos temporales o archivos basura.
2. Proteger información sensible: Evita que información sensible se suba como claves API y Contraseñas.
3. Reducir el tamaño del repositorio: mantiene la nube limpia y agiliza los procesos.
4. Evita problemas de compatibilidad: Se puede dar el caso que un equipo tenga unos archivos de un tipo de programa que otro equipo no tenga.
5. Facilita la colaboración: subir archivos que un desarrollador usa de forma especifica que pueden confundir al otro desarrollador. 






